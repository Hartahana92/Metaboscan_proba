import streamlit as st
import pandas as pd
import joblib
from io import BytesIO

def convert_df_to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False)
    return output.getvalue()

from config import (
    metabolites_selected_onco, metabolites_selected_CVD,
    metabolites_selected_Liv, metabolites_selected_PULM,
    metabolites_selected_RA
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –æ–¥–∏–Ω —Ä–∞–∑
@st.cache_resource
def load_model(path):
    return joblib.load(path)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ 10-–±–∞–ª–ª—å–Ω—É—é —à–∫–∞–ª—É
def probability_to_score(prob, threshold):
    prob = min(max(prob, 0), 1)
    if prob < threshold:
        score = 5 * prob / threshold
    else:
        score = 5 + 5 * (prob - threshold) / (1 - threshold)
    return round(score, 1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
models_info = {
    "Onco": {
        "model_path": "Onco_healthy_RF_0907.pkl",
        "features": metabolites_selected_onco
    },
    "CVD": {
        "model_path": "CVD_healthy_RF_0907.pkl",
        "features": metabolites_selected_CVD
    },
    "Liver": {
        "model_path": "Liver_healthy_RF_0907.pkl",
        "features": metabolites_selected_Liv
    },
    "Pulmo": {
        "model_path": "Pulmo_healthy_RF_0907.pkl",
        "features": metabolites_selected_PULM
    },
    "RA": {
        "model_path": "RA_healthy_RF_0907.pkl",
        "features": metabolites_selected_RA
    }
}

# --- Streamlit UI ---
st.title("üéØ –ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ 5 –ø–∞—Ç–æ–ª–æ–≥–∏—è–º")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –º–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º (Excel)", type=["xlsx"])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
st.sidebar.title("üîß –ü–æ—Ä–æ–≥–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
thresholds = {}
for disease in models_info:
    thresholds[disease] = st.sidebar.slider(
        f"{disease} –ø–æ—Ä–æ–≥",
        min_value=0.0, max_value=1.0, value=0.6, step=0.01
    )

if uploaded_file:
    df_input = pd.read_excel(uploaded_file)
    df_input = df_input.set_index(df_input.columns[0]) if df_input.columns[0] != "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞" else df_input

    results = []

    for idx, row in df_input.iterrows():
        row_result = {"ID": idx}
        for disease, info in models_info.items():
            try:
                model = load_model(info["model_path"])
                features = info["features"]
                row_data = pd.DataFrame([row[features].fillna(0)], columns=features)
                proba = model.predict_proba(row_data)[0][1]
                threshold = thresholds[disease]
                label = disease if proba >= threshold else "–ó–¥–æ—Ä–æ–≤—ã–π"
                score = probability_to_score(proba, threshold)

                row_result.update({
                    f"{disease} ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": round(proba, 2),
                    f"{disease} ‚Äî –∏—Å—Ö–æ–¥": label,
                    f"{disease} ‚Äî —Å–∫–æ—Ä (0‚Äì10)": 10-score
                })

            except Exception as e:
                row_result[f"{disease} ‚Äî –æ—à–∏–±–∫–∞"] = str(e)
        results.append(row_result)

    df_results = pd.DataFrame(results)
    st.success("‚úÖ –†–∞—Å—á—ë—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    st.dataframe(df_results)
    excel_data = convert_df_to_excel(df_results)

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel",
        data=excel_data,
        file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ_–≤—Å–µ–º_–º–æ–¥–µ–ª—è–º.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

